
use v5.012;
use strict;
use warnings;

use Chess;
use IO::Socket::INET;

my $bqueen = 'q';
my $bking  = 'i';
my $brook  = 'r';
my $bknight = 'k';
my $bbishop = 'b';
my $bpawn   = 'p';
my $wqueen = 'Q';
my $wking  = 'I';
my $wrook  = 'R';
my $wknight = 'K';
my $wbishop = 'R';
my $wpawn   = 'P';

my $bsquare = "#";
my $wsquare = " ";

sub init_board
{
	my $board = shift;
	for my $index ("a".."h") {
		my $bpawn = Chess::Piece::Pawn->new($index . "7","black", $bpawn);
		my $wpawn = Chess::Piece::Pawn->new($index . "2","white", $wpawn);
		$board->set_piece_at($index . "7", $bpawn);
		$board->set_piece_at($index . "2", $wpawn);
	}
	my $lbrook = Chess::Piece::Rook->new("a8","black", $brook);
	my $rbrook = Chess::Piece::Rook->new("h8","black", $brook);
	my $lwrook = Chess::Piece::Rook->new("a1","white", $wrook);
	my $rwrook = Chess::Piece::Rook->new("h1","white", $wrook);
	my $lbknight = Chess::Piece::Knight->new("b8","black", $bknight);
	my $rbknight = Chess::Piece::Knight->new("g8","black", $bknight);
	my $lwknight = Chess::Piece::Knight->new("b1","white", $wknight);
	my $rwknight = Chess::Piece::Knight->new("g1","white", $wknight);
	my $lbbishop = Chess::Piece::Bishop->new("c8","black", $bbishop);
	my $rbbishop = Chess::Piece::Bishop->new("f8","black", $bbishop);
	my $lwbishop = Chess::Piece::Bishop->new("c1","white", $wbishop);
	my $rwbishop = Chess::Piece::Bishop->new("f1","white", $wbishop);
	my $bking = Chess::Piece::King->new("d8","black", $bking);
	my $wking = Chess::Piece::King->new("e1","white", $wking);
	my $bqueen = Chess::Piece::Queen->new("e8","black", $bqueen);
	my $wqueen = Chess::Piece::Queen->new("d1","white", $wqueen);

	$board->set_piece_at("a8", $lbrook);
	$board->set_piece_at("h8", $rbrook);
	$board->set_piece_at("a1", $lwrook);
	$board->set_piece_at("h1", $rwrook);
	$board->set_piece_at("b8", $lbknight);
	$board->set_piece_at("g8", $rbknight);
	$board->set_piece_at("b1", $lwknight);
	$board->set_piece_at("g1", $rwknight);
	$board->set_piece_at("c8", $lbbishop);
	$board->set_piece_at("f8", $rbbishop);
	$board->set_piece_at("c1", $lwbishop);
	$board->set_piece_at("f1", $rwbishop);
	$board->set_piece_at("d8", $bking);
	$board->set_piece_at("e1", $wking);
	$board->set_piece_at("e8", $bqueen);
	$board->set_piece_at("d1", $wqueen);
}

sub visualize_board
{
	my $board = shift;
	my $str = "";
	foreach my $index (reverse 1..8){
		$str .= $index . "  ";
		
		foreach my $letter ("a".."h"){
			my $sq = $letter . $index;
			if (defined ($board->get_piece_at($sq)) )
			{
				$str .= $board->get_piece_at($sq)->get_description() ;
			}
			else {
				if ($board->get_color_of($sq) eq "dark") {
					$str .= $bsquare;
					}
				else {
					$str .= $wsquare;
					}
			}
		}
		$str .= "\n";
	}

	$str .= "\n";
	$str .= "   abcdefgh";
	return $str;
}


my $port = shift or die "No port specified";
my $socket = IO::Socket::INET->new(
	LocalPort => $port,
	Proto     => 'tcp',
	Listen    => SOMAXCONN ) or die "Couldn't create a socket";

print "Waiting for connection on $port \n";

my $clientsocket = $socket->accept;
	my $addr = gethostbyaddr($client->peeraddr, AF_INET);
	my $port = $client->peerport;

	print "Client has connected from $addr on port $port !\n";

	# set up game

	print "Setting game up \n";

	my $board = Chess::Board->new();
	init_board $board;
	my $game = Chess::Game->new("1","2");

	my $turn = "white";

	print "You are white\n";
	print $clientsocket visualize_board $board;
	print visualize_board $board;
	print "\n";
	print "Your turn to move\n";

	while(not ($game->player_checkmated("1") and $game->player_checkmated("2")
			 and $game->player_stalemated("1") and $game->player_stalemated("2")))
	{
		if ($turn eq "white")
		{	
			my $move = "junk";
			until ($move ~= /[a-h][1-8]\s[a-h][1-8]/ and $game->is_move_legal(split(" ",$move)[0], split(" ",$move)[1]))
			{
				print "Make a valid move: ";
				print "\n";
				$move = <STDIN>;
			}
			my $sqone = split (" ", $move)[0];
			my $sqtwo = split (" ", $move)[1];
			$game->make_move($sqone,$sqtwo);
		}
		else
		{
			my $clientmove = "junk";
			until ($clientmove ~= /[a-h][1-8]\s[a-h][1-8] and $game->is_move_legal(split(" ",$clientmove)[0], split(" ", $clientmove)[1]))
			{
				print $clientsocket "Make a valid move";
				$clientmove = <$clientsocket>;
			}
			my $squareone = split(" ", $clientmove)[0];
			my $squaretwo = split(" ", $clientmove)[1];
			$game->make_move($squareone, $squaretwo);
		}
	} 

close $socket;

